{"ast":null,"code":"// src/services/candidateMatchingEngine.ts\n/**\n * Calculates a skills match score between job requirements and candidate skills\n * @param job - The job posting\n * @param candidate - The candidate profile\n * @returns Score from 0 to 1\n */const calculateSkillsMatch=(job,candidate)=>{if(!candidate.skills||candidate.skills.length===0){return 0;}// Extract skill keywords from job description and requirements\nconst jobText=(job.description+' '+job.requirements.join(' ')).toLowerCase();const candidateSkills=candidate.skills.map(skill=>skill.toLowerCase());// Find matching skills\nconst matchingSkills=candidateSkills.filter(skill=>jobText.includes(skill)||job.requirements.some(req=>req.toLowerCase().includes(skill)));// Calculate percentage of candidate skills that match\nconst matchPercentage=matchingSkills.length/candidateSkills.length;// Bonus for having many relevant skills\nconst skillCount=candidateSkills.length;const bonusMultiplier=Math.min(1.2,1+(skillCount-3)*0.05);return Math.min(1,matchPercentage*bonusMultiplier);};/**\n * Calculates experience title match score\n * @param job - The job posting  \n * @param candidate - The candidate profile\n * @returns Score from 0 to 1\n */const calculateExperienceMatch=(job,candidate)=>{if(!candidate.experience||candidate.experience.length===0){return 0;}const jobTitle=job.title.toLowerCase();const jobKeywords=jobTitle.split(' ');let bestMatch=0;candidate.experience.forEach(exp=>{const expTitle=exp.title.toLowerCase();// Direct title match\nif(expTitle===jobTitle){bestMatch=Math.max(bestMatch,1.0);return;}// Partial keyword matching\nconst expKeywords=expTitle.split(' ');const matchingKeywords=jobKeywords.filter(keyword=>expKeywords.some(expKeyword=>expKeyword.includes(keyword)||keyword.includes(expKeyword)));const keywordMatch=matchingKeywords.length/jobKeywords.length;bestMatch=Math.max(bestMatch,keywordMatch);});return bestMatch;};/**\n * Calculates years of experience match score\n * @param job - The job posting\n * @param candidate - The candidate profile  \n * @returns Score from 0 to 1\n */const calculateYearsOfExperienceMatch=(job,candidate)=>{if(candidate.yearsOfExperience===undefined){return 0.5;// neutral score if not specified\n}// Extract required years from job requirements\nlet requiredYears=1;// default minimum\nfor(const requirement of job.requirements){const yearMatch=requirement.match(/(\\d+)\\+?\\s*years?/i);if(yearMatch){requiredYears=Math.max(requiredYears,parseInt(yearMatch[1],10));}}const candidateYears=candidate.yearsOfExperience;if(candidateYears>=requiredYears){// Full score if meets requirement, bonus for significant extra experience\nconst bonus=Math.min(0.2,(candidateYears-requiredYears)*0.05);return Math.min(1,1+bonus);}else{// Partial score if below requirement\nreturn candidateYears/requiredYears;}};/**\n * Calculates education match score\n * @param job - The job posting\n * @param candidate - The candidate profile\n * @returns Score from 0 to 1  \n */const calculateEducationMatch=(job,candidate)=>{if(!candidate.education||candidate.education.length===0){return 0.3;// partial credit for experience\n}const educationReqs=job.requirements.filter(req=>req.toLowerCase().includes('degree')||req.toLowerCase().includes('education')||req.toLowerCase().includes('bachelor')||req.toLowerCase().includes('master')||req.toLowerCase().includes('associate'));if(educationReqs.length===0){return 0.8;// high score if no specific education required\n}let bestMatch=0;educationReqs.forEach(req=>{candidate.education.forEach(edu=>{const reqLower=req.toLowerCase();const degreeLower=edu.degree.toLowerCase();// Check for degree level matches\nif(reqLower.includes('bachelor')&&degreeLower.includes('bachelor')){bestMatch=Math.max(bestMatch,1.0);}else if(reqLower.includes('master')&&degreeLower.includes('master')){bestMatch=Math.max(bestMatch,1.0);}else if(reqLower.includes('associate')&&degreeLower.includes('associate')){bestMatch=Math.max(bestMatch,0.8);}else if(reqLower.includes('degree')&&degreeLower.includes('degree')){bestMatch=Math.max(bestMatch,0.9);}// Check for field-specific matches\nif(reqLower.includes('early childhood')&&degreeLower.includes('early childhood')){bestMatch=Math.max(bestMatch,1.0);}else if(reqLower.includes('education')&&degreeLower.includes('education')){bestMatch=Math.max(bestMatch,0.9);}});});return bestMatch||0.5;// default partial match if education exists but doesn't clearly match\n};/**\n * Calculates certifications match score\n * @param job - The job posting\n * @param candidate - The candidate profile\n * @returns Score from 0 to 1\n */const calculateCertificationsMatch=(job,candidate)=>{const certReqs=job.requirements.filter(req=>req.toLowerCase().includes('certif')||req.toLowerCase().includes('license')||req.toLowerCase().includes('cpr')||req.toLowerCase().includes('first aid'));if(certReqs.length===0){return 0.8;// high score if no certifications required\n}if(!candidate.certifications||candidate.certifications.length===0){return 0;}const candidateCerts=candidate.certifications.map(cert=>cert.toLowerCase());let matchCount=0;certReqs.forEach(req=>{const reqLower=req.toLowerCase();const hasMatch=candidateCerts.some(cert=>reqLower.includes(cert)||cert.includes('cpr')||cert.includes('first aid'));if(hasMatch)matchCount++;});return matchCount/certReqs.length;};/**\n * Calculates job type preference match score\n * @param job - The job posting\n * @param candidate - The candidate profile\n * @returns Score from 0 to 1\n */const calculateJobTypeMatch=(job,candidate)=>{if(!candidate.preferredJobTypes||candidate.preferredJobTypes.length===0){return 0.7;// neutral score if not specified\n}return candidate.preferredJobTypes.includes(job.type)?1.0:0.3;};/**\n * Main function to calculate overall match score for a candidate against a job\n * @param job - The job posting\n * @param candidate - The candidate profile\n * @returns Match score from 0 to 100\n */export const calculateMatchScore=(job,candidate)=>{// Calculate individual scores\nconst skillsScore=calculateSkillsMatch(job,candidate);const experienceScore=calculateExperienceMatch(job,candidate);const yearsScore=calculateYearsOfExperienceMatch(job,candidate);const educationScore=calculateEducationMatch(job,candidate);const certificationsScore=calculateCertificationsMatch(job,candidate);const jobTypeScore=calculateJobTypeMatch(job,candidate);// Apply weights as specified\nconst weightedScore=skillsScore*0.25+// Skills: 25%\nexperienceScore*0.25+// Experience Title Match: 25%  \nyearsScore*0.20+// Years of Experience: 20%\neducationScore*0.15+// Education: 15%\ncertificationsScore*0.10+// Certifications: 10%\njobTypeScore*0.05;// Job Type Preference: 5%\n// Convert to 0-100 scale and round to whole number\nreturn Math.round(weightedScore*100);};","map":{"version":3,"names":["calculateSkillsMatch","job","candidate","skills","length","jobText","description","requirements","join","toLowerCase","candidateSkills","map","skill","matchingSkills","filter","includes","some","req","matchPercentage","skillCount","bonusMultiplier","Math","min","calculateExperienceMatch","experience","jobTitle","title","jobKeywords","split","bestMatch","forEach","exp","expTitle","max","expKeywords","matchingKeywords","keyword","expKeyword","keywordMatch","calculateYearsOfExperienceMatch","yearsOfExperience","undefined","requiredYears","requirement","yearMatch","match","parseInt","candidateYears","bonus","calculateEducationMatch","education","educationReqs","edu","reqLower","degreeLower","degree","calculateCertificationsMatch","certReqs","certifications","candidateCerts","cert","matchCount","hasMatch","calculateJobTypeMatch","preferredJobTypes","type","calculateMatchScore","skillsScore","experienceScore","yearsScore","educationScore","certificationsScore","jobTypeScore","weightedScore","round"],"sources":["/Users/kenanfranklin/Sites/daycare-react/src/services/candidateMatchingEngine.ts"],"sourcesContent":["// src/services/candidateMatchingEngine.ts\n\nimport { Job, UserProfile, JobType } from '../types/data';\n\n/**\n * Calculates a skills match score between job requirements and candidate skills\n * @param job - The job posting\n * @param candidate - The candidate profile\n * @returns Score from 0 to 1\n */\nconst calculateSkillsMatch = (job: Job, candidate: UserProfile): number => {\n  if (!candidate.skills || candidate.skills.length === 0) {\n    return 0;\n  }\n  \n  // Extract skill keywords from job description and requirements\n  const jobText = (job.description + ' ' + job.requirements.join(' ')).toLowerCase();\n  const candidateSkills = candidate.skills.map(skill => skill.toLowerCase());\n  \n  // Find matching skills\n  const matchingSkills = candidateSkills.filter(skill => \n    jobText.includes(skill) || \n    job.requirements.some(req => req.toLowerCase().includes(skill))\n  );\n  \n  // Calculate percentage of candidate skills that match\n  const matchPercentage = matchingSkills.length / candidateSkills.length;\n  \n  // Bonus for having many relevant skills\n  const skillCount = candidateSkills.length;\n  const bonusMultiplier = Math.min(1.2, 1 + (skillCount - 3) * 0.05);\n  \n  return Math.min(1, matchPercentage * bonusMultiplier);\n};\n\n/**\n * Calculates experience title match score\n * @param job - The job posting  \n * @param candidate - The candidate profile\n * @returns Score from 0 to 1\n */\nconst calculateExperienceMatch = (job: Job, candidate: UserProfile): number => {\n  if (!candidate.experience || candidate.experience.length === 0) {\n    return 0;\n  }\n  \n  const jobTitle = job.title.toLowerCase();\n  const jobKeywords = jobTitle.split(' ');\n  \n  let bestMatch = 0;\n  \n  candidate.experience.forEach(exp => {\n    const expTitle = exp.title.toLowerCase();\n    \n    // Direct title match\n    if (expTitle === jobTitle) {\n      bestMatch = Math.max(bestMatch, 1.0);\n      return;\n    }\n    \n    // Partial keyword matching\n    const expKeywords = expTitle.split(' ');\n    const matchingKeywords = jobKeywords.filter(keyword => \n      expKeywords.some(expKeyword => \n        expKeyword.includes(keyword) || keyword.includes(expKeyword)\n      )\n    );\n    \n    const keywordMatch = matchingKeywords.length / jobKeywords.length;\n    bestMatch = Math.max(bestMatch, keywordMatch);\n  });\n  \n  return bestMatch;\n};\n\n/**\n * Calculates years of experience match score\n * @param job - The job posting\n * @param candidate - The candidate profile  \n * @returns Score from 0 to 1\n */\nconst calculateYearsOfExperienceMatch = (job: Job, candidate: UserProfile): number => {\n  if (candidate.yearsOfExperience === undefined) {\n    return 0.5; // neutral score if not specified\n  }\n  \n  // Extract required years from job requirements\n  let requiredYears = 1; // default minimum\n  for (const requirement of job.requirements) {\n    const yearMatch = requirement.match(/(\\d+)\\+?\\s*years?/i);\n    if (yearMatch) {\n      requiredYears = Math.max(requiredYears, parseInt(yearMatch[1], 10));\n    }\n  }\n  \n  const candidateYears = candidate.yearsOfExperience;\n  \n  if (candidateYears >= requiredYears) {\n    // Full score if meets requirement, bonus for significant extra experience\n    const bonus = Math.min(0.2, (candidateYears - requiredYears) * 0.05);\n    return Math.min(1, 1 + bonus);\n  } else {\n    // Partial score if below requirement\n    return candidateYears / requiredYears;\n  }\n};\n\n/**\n * Calculates education match score\n * @param job - The job posting\n * @param candidate - The candidate profile\n * @returns Score from 0 to 1  \n */\nconst calculateEducationMatch = (job: Job, candidate: UserProfile): number => {\n  if (!candidate.education || candidate.education.length === 0) {\n    return 0.3; // partial credit for experience\n  }\n  \n  const educationReqs = job.requirements.filter(req => \n    req.toLowerCase().includes('degree') || \n    req.toLowerCase().includes('education') ||\n    req.toLowerCase().includes('bachelor') ||\n    req.toLowerCase().includes('master') ||\n    req.toLowerCase().includes('associate')\n  );\n  \n  if (educationReqs.length === 0) {\n    return 0.8; // high score if no specific education required\n  }\n  \n  let bestMatch = 0;\n  \n  educationReqs.forEach(req => {\n    candidate.education!.forEach(edu => {\n      const reqLower = req.toLowerCase();\n      const degreeLower = edu.degree.toLowerCase();\n      \n      // Check for degree level matches\n      if (reqLower.includes('bachelor') && degreeLower.includes('bachelor')) {\n        bestMatch = Math.max(bestMatch, 1.0);\n      } else if (reqLower.includes('master') && degreeLower.includes('master')) {\n        bestMatch = Math.max(bestMatch, 1.0);\n      } else if (reqLower.includes('associate') && degreeLower.includes('associate')) {\n        bestMatch = Math.max(bestMatch, 0.8);\n      } else if (reqLower.includes('degree') && degreeLower.includes('degree')) {\n        bestMatch = Math.max(bestMatch, 0.9);\n      }\n      \n      // Check for field-specific matches\n      if (reqLower.includes('early childhood') && degreeLower.includes('early childhood')) {\n        bestMatch = Math.max(bestMatch, 1.0);\n      } else if (reqLower.includes('education') && degreeLower.includes('education')) {\n        bestMatch = Math.max(bestMatch, 0.9);\n      }\n    });\n  });\n  \n  return bestMatch || 0.5; // default partial match if education exists but doesn't clearly match\n};\n\n/**\n * Calculates certifications match score\n * @param job - The job posting\n * @param candidate - The candidate profile\n * @returns Score from 0 to 1\n */\nconst calculateCertificationsMatch = (job: Job, candidate: UserProfile): number => {\n  const certReqs = job.requirements.filter(req => \n    req.toLowerCase().includes('certif') || \n    req.toLowerCase().includes('license') ||\n    req.toLowerCase().includes('cpr') ||\n    req.toLowerCase().includes('first aid')\n  );\n  \n  if (certReqs.length === 0) {\n    return 0.8; // high score if no certifications required\n  }\n  \n  if (!candidate.certifications || candidate.certifications.length === 0) {\n    return 0;\n  }\n  \n  const candidateCerts = candidate.certifications.map(cert => cert.toLowerCase());\n  let matchCount = 0;\n  \n  certReqs.forEach(req => {\n    const reqLower = req.toLowerCase();\n    const hasMatch = candidateCerts.some(cert => \n      reqLower.includes(cert) || cert.includes('cpr') || cert.includes('first aid')\n    );\n    if (hasMatch) matchCount++;\n  });\n  \n  return matchCount / certReqs.length;\n};\n\n/**\n * Calculates job type preference match score\n * @param job - The job posting\n * @param candidate - The candidate profile\n * @returns Score from 0 to 1\n */\nconst calculateJobTypeMatch = (job: Job, candidate: UserProfile): number => {\n  if (!candidate.preferredJobTypes || candidate.preferredJobTypes.length === 0) {\n    return 0.7; // neutral score if not specified\n  }\n  \n  return candidate.preferredJobTypes.includes(job.type) ? 1.0 : 0.3;\n};\n\n/**\n * Main function to calculate overall match score for a candidate against a job\n * @param job - The job posting\n * @param candidate - The candidate profile\n * @returns Match score from 0 to 100\n */\nexport const calculateMatchScore = (job: Job, candidate: UserProfile): number => {\n  // Calculate individual scores\n  const skillsScore = calculateSkillsMatch(job, candidate);\n  const experienceScore = calculateExperienceMatch(job, candidate);\n  const yearsScore = calculateYearsOfExperienceMatch(job, candidate);\n  const educationScore = calculateEducationMatch(job, candidate);\n  const certificationsScore = calculateCertificationsMatch(job, candidate);\n  const jobTypeScore = calculateJobTypeMatch(job, candidate);\n  \n  // Apply weights as specified\n  const weightedScore = \n    (skillsScore * 0.25) +           // Skills: 25%\n    (experienceScore * 0.25) +       // Experience Title Match: 25%  \n    (yearsScore * 0.20) +            // Years of Experience: 20%\n    (educationScore * 0.15) +        // Education: 15%\n    (certificationsScore * 0.10) +   // Certifications: 10%\n    (jobTypeScore * 0.05);           // Job Type Preference: 5%\n  \n  // Convert to 0-100 scale and round to whole number\n  return Math.round(weightedScore * 100);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}