{"ast":null,"code":"// src/services/recommendationService.ts\n\nimport { calculateMatchScore } from './candidateMatchingEngine';\n\n// Type for a candidate enriched with their match score\n\n/**\n * Gets top recommended candidates for a specific job\n * @param job - The job posting\n * @param candidates - Array of all available candidates\n * @param limit - Maximum number of candidates to return (default: 5)\n * @returns Array of top candidates sorted by match score (highest first)\n */\nexport const getRecommendationsForJob = (job, candidates, limit = 5) => {\n  // Calculate match scores for all candidates\n  const candidatesWithScores = candidates.map(candidate => ({\n    ...candidate,\n    matchScore: calculateMatchScore(job, candidate)\n  }));\n\n  // Sort by match score (highest first) and return top N\n  return candidatesWithScores.sort((a, b) => b.matchScore - a.matchScore).slice(0, limit);\n};\n\n/**\n * Analyzes a candidate against a job to identify strengths and gaps\n * @param job - The job posting\n * @param candidate - The candidate profile\n * @returns Object with arrays of strengths and gaps\n */\nexport const generateStrengthsAndGaps = (job, candidate) => {\n  const strengths = [];\n  const gaps = [];\n\n  // Analyze skills\n  if (candidate.skills && candidate.skills.length > 0) {\n    const jobText = (job.description + ' ' + job.requirements.join(' ')).toLowerCase();\n    const matchingSkills = candidate.skills.filter(skill => jobText.includes(skill.toLowerCase()) || job.requirements.some(req => req.toLowerCase().includes(skill.toLowerCase())));\n    if (matchingSkills.length >= 3) {\n      strengths.push(`Strong skill alignment: ${matchingSkills.slice(0, 3).join(', ')}`);\n    } else if (matchingSkills.length > 0) {\n      strengths.push(`Some relevant skills: ${matchingSkills.join(', ')}`);\n    } else {\n      gaps.push('Limited skills matching job requirements');\n    }\n  } else {\n    gaps.push('No skills listed on profile');\n  }\n\n  // Analyze experience titles\n  if (candidate.experience && candidate.experience.length > 0) {\n    const hasRelevantTitle = candidate.experience.some(exp => exp.title.toLowerCase().includes(job.title.toLowerCase()) || job.title.toLowerCase().includes(exp.title.toLowerCase()));\n    if (hasRelevantTitle) {\n      strengths.push('Direct experience in a similar role');\n    } else {\n      // Check for related experience\n      const hasChildcareExp = candidate.experience.some(exp => exp.title.toLowerCase().includes('teacher') || exp.title.toLowerCase().includes('caregiver') || exp.title.toLowerCase().includes('childcare') || exp.title.toLowerCase().includes('education'));\n      if (hasChildcareExp) {\n        strengths.push('Relevant childcare/education experience');\n      } else {\n        gaps.push('Limited relevant job title experience');\n      }\n    }\n  } else {\n    gaps.push('No work experience listed');\n  }\n\n  // Analyze years of experience\n  if (candidate.yearsOfExperience !== undefined) {\n    // Extract required years from job requirements\n    let requiredYears = 1;\n    for (const requirement of job.requirements) {\n      const yearMatch = requirement.match(/(\\d+)\\+?\\s*years?/i);\n      if (yearMatch) {\n        requiredYears = Math.max(requiredYears, parseInt(yearMatch[1], 10));\n      }\n    }\n    if (candidate.yearsOfExperience >= requiredYears + 2) {\n      strengths.push(`Extensive experience (${candidate.yearsOfExperience}+ years)`);\n    } else if (candidate.yearsOfExperience >= requiredYears) {\n      strengths.push(`Meets experience requirements (${candidate.yearsOfExperience} years)`);\n    } else {\n      gaps.push(`Fewer years of experience than required (${candidate.yearsOfExperience} vs ${requiredYears} years)`);\n    }\n  } else {\n    gaps.push('Years of experience not specified');\n  }\n\n  // Analyze education\n  const educationReqs = job.requirements.filter(req => req.toLowerCase().includes('degree') || req.toLowerCase().includes('education') || req.toLowerCase().includes('bachelor') || req.toLowerCase().includes('master'));\n  if (educationReqs.length > 0) {\n    if (candidate.education && candidate.education.length > 0) {\n      const hasMatchingEducation = educationReqs.some(req => candidate.education.some(edu => req.toLowerCase().includes(edu.degree.toLowerCase()) || edu.degree.toLowerCase().includes('early childhood') || edu.degree.toLowerCase().includes('education')));\n      if (hasMatchingEducation) {\n        strengths.push('Education requirements met');\n      } else {\n        gaps.push('May not fully meet education requirements');\n      }\n    } else {\n      gaps.push('No education information provided');\n    }\n  }\n\n  // Analyze certifications\n  const certReqs = job.requirements.filter(req => req.toLowerCase().includes('certif') || req.toLowerCase().includes('license') || req.toLowerCase().includes('cpr') || req.toLowerCase().includes('first aid'));\n  if (certReqs.length > 0) {\n    if (candidate.certifications && candidate.certifications.length > 0) {\n      const hasCertifications = certReqs.some(req => candidate.certifications.some(cert => req.toLowerCase().includes(cert.toLowerCase()) || cert.toLowerCase().includes('cpr') || cert.toLowerCase().includes('first aid')));\n      if (hasCertifications) {\n        strengths.push('Has required certifications');\n      } else {\n        gaps.push('May need to obtain specific certifications');\n      }\n    } else {\n      gaps.push('No certifications listed');\n    }\n  }\n\n  // Analyze location\n  if (candidate.location && job.location) {\n    const candidateCity = candidate.location.split(',')[0].trim().toLowerCase();\n    const jobCity = job.location.split(',')[0].trim().toLowerCase();\n    if (candidateCity === jobCity) {\n      strengths.push(`Located in same area (${candidateCity})`);\n    } else {\n      gaps.push(`Location difference may require commute or relocation`);\n    }\n  }\n\n  // Analyze job type preference\n  if (candidate.preferredJobTypes && candidate.preferredJobTypes.includes(job.type)) {\n    strengths.push('Job type aligns with preferences');\n  } else if (candidate.preferredJobTypes && candidate.preferredJobTypes.length > 0) {\n    gaps.push('Job type may not match stated preferences');\n  }\n  return {\n    strengths,\n    gaps\n  };\n};\n\n/**\n * Generates a human-readable summary of recommendations for a job\n * @param job - The job posting\n * @param topCandidates - Array of top recommended candidates\n * @returns A summary paragraph for recruiters\n */\nexport const generateRecommendationSummary = (job, topCandidates) => {\n  if (topCandidates.length === 0) {\n    return `No qualified candidates found for the ${job.title} position at ${job.organizationName}. Consider adjusting requirements or expanding your search criteria.`;\n  }\n  const topCandidate = topCandidates[0];\n  const avgScore = topCandidates.reduce((sum, candidate) => sum + candidate.matchScore, 0) / topCandidates.length;\n  let summary = `We found ${topCandidates.length} qualified candidate${topCandidates.length > 1 ? 's' : ''} for the ${job.title} role at ${job.organizationName}. `;\n  summary += `The top match is ${topCandidate.firstName} ${topCandidate.lastName} with a ${topCandidate.matchScore}% compatibility score. `;\n\n  // Add assessment based on average score\n  if (avgScore >= 85) {\n    summary += 'The candidate pool is exceptionally strong with multiple highly qualified applicants.';\n  } else if (avgScore >= 70) {\n    summary += 'The overall candidate pool is strong with several well-qualified applicants.';\n  } else if (avgScore >= 55) {\n    summary += 'The candidate pool shows promise, though some candidates may need additional training or development.';\n  } else {\n    summary += 'Consider expanding your search or adjusting requirements to find more closely matched candidates.';\n  }\n\n  // Add insights about top candidate\n  if (topCandidate.yearsOfExperience) {\n    summary += ` ${topCandidate.firstName} brings ${topCandidate.yearsOfExperience} years of relevant experience`;\n    if (topCandidate.education && topCandidate.education.length > 0) {\n      const degree = topCandidate.education[0].degree;\n      summary += ` and holds a ${degree}`;\n    }\n    summary += '.';\n  }\n  return summary;\n};","map":{"version":3,"names":["calculateMatchScore","getRecommendationsForJob","job","candidates","limit","candidatesWithScores","map","candidate","matchScore","sort","a","b","slice","generateStrengthsAndGaps","strengths","gaps","skills","length","jobText","description","requirements","join","toLowerCase","matchingSkills","filter","skill","includes","some","req","push","experience","hasRelevantTitle","exp","title","hasChildcareExp","yearsOfExperience","undefined","requiredYears","requirement","yearMatch","match","Math","max","parseInt","educationReqs","education","hasMatchingEducation","edu","degree","certReqs","certifications","hasCertifications","cert","location","candidateCity","split","trim","jobCity","preferredJobTypes","type","generateRecommendationSummary","topCandidates","organizationName","topCandidate","avgScore","reduce","sum","summary","firstName","lastName"],"sources":["/Users/kenanfranklin/Sites/daycare-react/src/services/recommendationService.ts"],"sourcesContent":["// src/services/recommendationService.ts\n\nimport { Job, UserProfile } from '../types/data';\nimport { calculateMatchScore } from './candidateMatchingEngine';\n\n// Type for a candidate enriched with their match score\nexport type RecommendedCandidate = UserProfile & { matchScore: number };\n\n/**\n * Gets top recommended candidates for a specific job\n * @param job - The job posting\n * @param candidates - Array of all available candidates\n * @param limit - Maximum number of candidates to return (default: 5)\n * @returns Array of top candidates sorted by match score (highest first)\n */\nexport const getRecommendationsForJob = (\n  job: Job,\n  candidates: UserProfile[],\n  limit: number = 5\n): RecommendedCandidate[] => {\n  // Calculate match scores for all candidates\n  const candidatesWithScores: RecommendedCandidate[] = candidates.map(candidate => ({\n    ...candidate,\n    matchScore: calculateMatchScore(job, candidate)\n  }));\n\n  // Sort by match score (highest first) and return top N\n  return candidatesWithScores\n    .sort((a, b) => b.matchScore - a.matchScore)\n    .slice(0, limit);\n};\n\n/**\n * Analyzes a candidate against a job to identify strengths and gaps\n * @param job - The job posting\n * @param candidate - The candidate profile\n * @returns Object with arrays of strengths and gaps\n */\nexport const generateStrengthsAndGaps = (\n  job: Job,\n  candidate: UserProfile\n): { strengths: string[], gaps: string[] } => {\n  const strengths: string[] = [];\n  const gaps: string[] = [];\n\n  // Analyze skills\n  if (candidate.skills && candidate.skills.length > 0) {\n    const jobText = (job.description + ' ' + job.requirements.join(' ')).toLowerCase();\n    const matchingSkills = candidate.skills.filter(skill =>\n      jobText.includes(skill.toLowerCase()) ||\n      job.requirements.some(req => req.toLowerCase().includes(skill.toLowerCase()))\n    );\n\n    if (matchingSkills.length >= 3) {\n      strengths.push(`Strong skill alignment: ${matchingSkills.slice(0, 3).join(', ')}`);\n    } else if (matchingSkills.length > 0) {\n      strengths.push(`Some relevant skills: ${matchingSkills.join(', ')}`);\n    } else {\n      gaps.push('Limited skills matching job requirements');\n    }\n  } else {\n    gaps.push('No skills listed on profile');\n  }\n\n  // Analyze experience titles\n  if (candidate.experience && candidate.experience.length > 0) {\n    const hasRelevantTitle = candidate.experience.some(exp =>\n      exp.title.toLowerCase().includes(job.title.toLowerCase()) ||\n      job.title.toLowerCase().includes(exp.title.toLowerCase())\n    );\n\n    if (hasRelevantTitle) {\n      strengths.push('Direct experience in a similar role');\n    } else {\n      // Check for related experience\n      const hasChildcareExp = candidate.experience.some(exp =>\n        exp.title.toLowerCase().includes('teacher') ||\n        exp.title.toLowerCase().includes('caregiver') ||\n        exp.title.toLowerCase().includes('childcare') ||\n        exp.title.toLowerCase().includes('education')\n      );\n\n      if (hasChildcareExp) {\n        strengths.push('Relevant childcare/education experience');\n      } else {\n        gaps.push('Limited relevant job title experience');\n      }\n    }\n  } else {\n    gaps.push('No work experience listed');\n  }\n\n  // Analyze years of experience\n  if (candidate.yearsOfExperience !== undefined) {\n    // Extract required years from job requirements\n    let requiredYears = 1;\n    for (const requirement of job.requirements) {\n      const yearMatch = requirement.match(/(\\d+)\\+?\\s*years?/i);\n      if (yearMatch) {\n        requiredYears = Math.max(requiredYears, parseInt(yearMatch[1], 10));\n      }\n    }\n\n    if (candidate.yearsOfExperience >= requiredYears + 2) {\n      strengths.push(`Extensive experience (${candidate.yearsOfExperience}+ years)`);\n    } else if (candidate.yearsOfExperience >= requiredYears) {\n      strengths.push(`Meets experience requirements (${candidate.yearsOfExperience} years)`);\n    } else {\n      gaps.push(`Fewer years of experience than required (${candidate.yearsOfExperience} vs ${requiredYears} years)`);\n    }\n  } else {\n    gaps.push('Years of experience not specified');\n  }\n\n  // Analyze education\n  const educationReqs = job.requirements.filter(req =>\n    req.toLowerCase().includes('degree') ||\n    req.toLowerCase().includes('education') ||\n    req.toLowerCase().includes('bachelor') ||\n    req.toLowerCase().includes('master')\n  );\n\n  if (educationReqs.length > 0) {\n    if (candidate.education && candidate.education.length > 0) {\n      const hasMatchingEducation = educationReqs.some(req =>\n        candidate.education!.some(edu =>\n          req.toLowerCase().includes(edu.degree.toLowerCase()) ||\n          edu.degree.toLowerCase().includes('early childhood') ||\n          edu.degree.toLowerCase().includes('education')\n        )\n      );\n\n      if (hasMatchingEducation) {\n        strengths.push('Education requirements met');\n      } else {\n        gaps.push('May not fully meet education requirements');\n      }\n    } else {\n      gaps.push('No education information provided');\n    }\n  }\n\n  // Analyze certifications\n  const certReqs = job.requirements.filter(req =>\n    req.toLowerCase().includes('certif') ||\n    req.toLowerCase().includes('license') ||\n    req.toLowerCase().includes('cpr') ||\n    req.toLowerCase().includes('first aid')\n  );\n\n  if (certReqs.length > 0) {\n    if (candidate.certifications && candidate.certifications.length > 0) {\n      const hasCertifications = certReqs.some(req =>\n        candidate.certifications!.some(cert =>\n          req.toLowerCase().includes(cert.toLowerCase()) ||\n          cert.toLowerCase().includes('cpr') ||\n          cert.toLowerCase().includes('first aid')\n        )\n      );\n\n      if (hasCertifications) {\n        strengths.push('Has required certifications');\n      } else {\n        gaps.push('May need to obtain specific certifications');\n      }\n    } else {\n      gaps.push('No certifications listed');\n    }\n  }\n\n  // Analyze location\n  if (candidate.location && job.location) {\n    const candidateCity = candidate.location.split(',')[0].trim().toLowerCase();\n    const jobCity = job.location.split(',')[0].trim().toLowerCase();\n\n    if (candidateCity === jobCity) {\n      strengths.push(`Located in same area (${candidateCity})`);\n    } else {\n      gaps.push(`Location difference may require commute or relocation`);\n    }\n  }\n\n  // Analyze job type preference\n  if (candidate.preferredJobTypes && candidate.preferredJobTypes.includes(job.type)) {\n    strengths.push('Job type aligns with preferences');\n  } else if (candidate.preferredJobTypes && candidate.preferredJobTypes.length > 0) {\n    gaps.push('Job type may not match stated preferences');\n  }\n\n  return { strengths, gaps };\n};\n\n/**\n * Generates a human-readable summary of recommendations for a job\n * @param job - The job posting\n * @param topCandidates - Array of top recommended candidates\n * @returns A summary paragraph for recruiters\n */\nexport const generateRecommendationSummary = (\n  job: Job,\n  topCandidates: RecommendedCandidate[]\n): string => {\n  if (topCandidates.length === 0) {\n    return `No qualified candidates found for the ${job.title} position at ${job.organizationName}. Consider adjusting requirements or expanding your search criteria.`;\n  }\n\n  const topCandidate = topCandidates[0];\n  const avgScore = topCandidates.reduce((sum, candidate) => sum + candidate.matchScore, 0) / topCandidates.length;\n\n  let summary = `We found ${topCandidates.length} qualified candidate${topCandidates.length > 1 ? 's' : ''} for the ${job.title} role at ${job.organizationName}. `;\n\n  summary += `The top match is ${topCandidate.firstName} ${topCandidate.lastName} with a ${topCandidate.matchScore}% compatibility score. `;\n\n  // Add assessment based on average score\n  if (avgScore >= 85) {\n    summary += 'The candidate pool is exceptionally strong with multiple highly qualified applicants.';\n  } else if (avgScore >= 70) {\n    summary += 'The overall candidate pool is strong with several well-qualified applicants.';\n  } else if (avgScore >= 55) {\n    summary += 'The candidate pool shows promise, though some candidates may need additional training or development.';\n  } else {\n    summary += 'Consider expanding your search or adjusting requirements to find more closely matched candidates.';\n  }\n\n  // Add insights about top candidate\n  if (topCandidate.yearsOfExperience) {\n    summary += ` ${topCandidate.firstName} brings ${topCandidate.yearsOfExperience} years of relevant experience`;\n\n    if (topCandidate.education && topCandidate.education.length > 0) {\n      const degree = topCandidate.education[0].degree;\n      summary += ` and holds a ${degree}`;\n    }\n\n    summary += '.';\n  }\n\n  return summary;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}